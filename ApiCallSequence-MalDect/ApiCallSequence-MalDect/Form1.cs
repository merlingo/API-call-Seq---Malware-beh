using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ApiCallSequence_MalDect
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            //belirtilen dosyadan sequence alınır ve apiler kodlanır. api adları ce kodları codesdgw e yuklenir her kod ile ACSdgw nin row başlıkları olur, columlarını da malware yazılır
            //o malwarede varsa 1 yoksa 0 koyulur.
            //en çok malwarede olan row başlıklarından subsequence oluşturulur ve girilen bulunma oranına göre subsequence çıkarılır.
            string filename = @"D:\api_call_seq1.txt";
            string filename2 = @"D:\api_call_seq2.txt";
            comboBox1.Items.Add(filename);
            ACSdgw.DataSource = ApiCallSeqeuence(filename);
            Lcsdgw.DataSource = LongestCommonSubsequence(filename, filename2);
        }
        public List<String> readFile(string filename)
        {
            //@"C:\Users\Public\TestFolder\WriteLines2.txt"
            List<String> apiFuncSeq = new List<string>();
            string[] lines = System.IO.File.ReadAllLines(filename);

            // Display the file contents by using a foreach loop.
            int i=0;
            foreach (string line in lines)
            {
                if (i == 0||line == "[" || line == "]")
                {
                    i++;
                    continue;
                }
           
                // Use a tab to indent each line of the file.
                Console.WriteLine("\t" + line);
                apiFuncSeq.Add(line);
                i++;
            }
            return apiFuncSeq;
         }
        public DataTable LongestCommonSubsequence(string f1, string f2)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("API function", typeof(String));
            List<String> apiFuncSeq1 = readFile(f1);
            List<String> apiFuncSeq2 = readFile(f2);
            foreach (string af in apiFuncSeq1.Distinct())
            {
                if(apiFuncSeq2.Contains(af))
                     dt.Rows.Add(af);
            }
            return dt;
        }
        public DataTable ApiCallSeqeuence(string filename)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("API function", typeof(String));
            List < String > apiFuncSeq = readFile(filename);
            foreach (string af in apiFuncSeq.Distinct())
            {
                
                dt.Rows.Add(af);
            }
            return dt;
        }
        public DataTable apiFuncCoding(List<String> apiFuncSeq)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("API function", typeof(String));
            dt.Columns.Add("Codes", typeof(String));
            string code="";
            foreach(string af in apiFuncSeq.Distinct())
            {
                code="";
                if (af.Any(char.IsUpper))
                {
                    foreach (char letter in af)
                    {
                        if (Char.IsUpper(letter) && af.Length > 0)
                            code += " " + letter;
                        else
                            code += letter;
                    }

                }
                else
                {
                    code = af.Substring(0, 4);
                }
                dt.Rows.Add(af, code);
            }
            return dt;
        }
    }
}
