class ApiCall(object):
  def __init__(self, address, name, args):
    self.address = address
    self.name = name
    self.args = args

def hook_call(call_site, from_addr, to_addr):
  # Check if call is potentially external (not within current function)
  if from_addr != get_func_start(to_addr): 
    # Get function name (might be unavailable for external functions)
    name = Name(to_addr) 
    
    # Analyze arguments (might not be reliable for complex functions)
    args = []
    for arg_idx in range(get_arg_qty(call_site)):
      arg_ea = get_arg_addr(call_site, arg_idx)
      arg_val = idc.Dword(arg_ea)  # Get argument value (might be just a pointer)
      args.append(arg_val)

    api_calls.append(ApiCall(to_addr, name, args))

# Initialize empty list to store ApiCall objects
api_calls = []

# Hook code analysis event
HookCode(hook_call, "find_code")

# Analyze the entire loaded ida database
idc.AnalyzeArea(MinEA(), idc.BADADDR)

# Print all extracted API calls
for call in api_calls:
  print(f"API Call: {hex(call.address)}")
  print(f"\t- Name: {call.name} (might be unavailable for external functions)")
  print(f"\t- Arguments: {call.args} (might be just data values)")